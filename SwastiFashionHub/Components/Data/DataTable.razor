@using SwastiFashionHub.Components.Core;
@typeparam TItem
@attribute [CascadingTypeParameter(nameof(TItem))]

<CascadingValue Value=@this IsFixed=true>
    <div class="table-responsive">
        <div class="container-fluid" style="@(!ShowBorder? "width:100%" : "")">
            <div class="@(!ShowBorder ? "no-border" : "")" style=@Style>
                <table id="@TableId" class="table table-bordered dt-responsive nowrap">
                    <thead>
                        <tr>
                            @Columns
                            @if (AllowSelect)
                            {
                                <th></th>
                            }
                            @if (columns is not null)
                            {
                                foreach (var column in columns)
                                {
                                    <th style="text-align: @column.TextAlign.ToString().ToLower()">@column.Heading</th>
                                }
                            }
                            @if (AllowEdit || AllowDelete)
                            {
                                <th>Action</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var count = Items?.Count(x => RowString(x).ToLower().Contains(filterCriteria.ToLower()));
                            @if (count == 0 && !String.IsNullOrEmpty(filterCriteria))
                            {
                                <tr style="height: 5rem;">
                                    <td colspan=@(columns.Count + (AllowEdit || AllowDelete ? 1 : 0))
                                        style="text-align:center; font-size: 14px;">
                                        No data found
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @if (Items is not null & columns is not null)
                                {
                                    int index = 0;
                                    foreach (var item in Items.Where(x => RowString(x).ToLower().Contains(filterCriteria.ToLower())).ToList())
                                    {
                                        int idx = index;
                                        <tr class="@(AllowSelect ? "selectable": "") @(AllowSelect && idx==selectedIndex ? "selected" : "")">
                                            @if (AllowSelect)
                                            {
                                                <td class="checkbox-col">
                                                    <InputCheckbox Value=@(Helper.GetPropertyValue<bool>(item, "Selected"))
                                                   @onchange=@(e=> SelectItem(item, true, idx))>
                                                    </InputCheckbox>
                                                </td>
                                            }
                                            @foreach (var column in columns)
                                            {
                                                <td style="text-align: @column.TextAlign.ToString().ToLower()">
                                                    @if (column.GetType() == typeof(TemplateColumn<TItem>))
                                                    {
                                                        var col = column as TemplateColumn<TItem>;
                                                        @col.ChildContent(item)
                                                    }
                                                    else
                                                    {
                                                        @if (!String.IsNullOrEmpty(column.DataField))
                                                        {
                                                            @(Helper.GetPropertyValue<string>(item, column.DataField))
                                                        }
                                                    }
                                                </td>
                                            }
                                            @if (AllowEdit || AllowDelete)
                                            {
                                                <td class="action-icons">
                                                    @if (AllowEdit)
                                                    {
                                                        <a href="javascript:void(0);" @onclick=@(()=> OnEditClick(item)) class="px-1  text-primary">
                                                            <i class="uil uil-pen font-size-18"></i>
                                                        </a>

                                                    }
                                                    @if (AllowDelete)
                                                    {
                                                        <a href="javascript:void(0);" @onclick=@(()=> OnDeleteClick(item)) class="px-1 text-danger">
                                                            <i class="uil uil-trash-alt font-size-18"></i>
                                                        </a>
                                                    }
                                                </td>
                                            }
                                        </tr>
                                        ++index;
                                    }
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</CascadingValue>






